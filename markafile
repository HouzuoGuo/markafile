#!/usr/bin/python3
import os
import sys
import signal
import sqlite3

from os import walk
from os.path import isfile, isdir, abspath
from os.path import join as path_join
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from textwrap import dedent
from docutils.parsers.rst.directives import path

DESC = '''
markafile - all-in-one solution for file tagging
'''

SETUP = '''CREATE TABLE IF NOT EXISTS TAG (
             ID INTEGER PRIMARY KEY AUTOINCREMENT,
             PATH TEXT NOT NULL,
             TAG TEXT NOT NULL
           );

           CREATE TABLE IF NOT EXISTS WATCH (
             ID INTEGER PRIMARY KEY AUTOINCREMENT,
             DIR TEXT NOT NULL
           );

           CREATE INDEX IF NOT EXISTS TAG_PATH ON TAG (PATH);
           CREATE INDEX IF NOT EXISTS TAG_BOTH ON TAG (PATH, TAG);

           CREATE INDEX IF NOT EXISTS WATCH_DIR ON WATCH (DIR);'''

args, db = None, None


def debug(msg):
    if args and args.debug:
        sys.stderr.write(msg + '\n')


def panic(msg):
    sys.stderr.write('ERROR: {0}\n'.format(msg))
    sys.exit(1)


def connect():
    global args, db
    if not (args or args.db or args.db.strip()):
        panic('Database path may not be blank')

    db = sqlite3.connect(args.db)
    debug('Connected to "{0}"'.format(args.db))


def disconnect():
    global db
    if db:
        db.commit()
        db.close()
        debug('Disconnected')


def setup():
    cursor = db.cursor()
    cursor.executescript(SETUP)
    disconnect()
    connect()
    debug('Database setup completed')


def parsepath():
    global args
    files = []
    for path in args.files:
        path = abspath(path)
        if isfile(path):
            files.append(path)
        elif isdir(path):
            if args.recursive:
                for root, _, dir_files in walk(path):
                    files.extend([path_join(root, single_file)
                                  for single_file in dir_files])
            else:
                files.extend([path_join(path, x) for x in next(walk(path))[2]])
    return files


def tag():
    global db, args
    if not args.tags:
        return

    new_tags = []
    cursor = db.cursor()
    for tag in args.tags.split():
        for path in parsepath():
            cursor.execute('SELECT COUNT(*) FROM TAG ' +
                           'WHERE PATH = ? AND TAG = ?', (path, tag))
            if cursor.fetchone()[0]:
                debug('File "{0}" already has tag "{1}"'.format(path, tag))
            else:
                new_tags.append((path, tag))
                debug('Add tag "{0}" to file "{1}"'.format(tag, path))
    cursor = db.cursor()
    cursor.executemany('INSERT INTO TAG(PATH, TAG) VALUES (?, ?)', new_tags)
    db.commit()


def untag():
    global db, args
    if not (args and args.tags):
        return

    cursor = db.cursor()
    cursor.executemany('DELETE FROM TAG WHERE PATH = ? AND TAG = ?',
                       [(path, tag)
                        for path in parsepath()
                        for tag in args.tags.split()])
    db.commit()


def find():
    global db, args
    if not args.tags:
        return

    cursor = db.cursor()
    if args.tags == '*':
        for path in parsepath():
            cursor.execute('SELECT TAG FROM TAG WHERE PATH = ?', (path,))
            rows = cursor.fetchall()
            if rows:
                print(path + ': ' + ' '.join([row[0] for row in rows]))


def daemon():
    global db

ACTIONS = {'tag': tag, 'untag': untag, 'find': find, 'daemon': daemon}

if __name__ == '__main__':
    parser = ArgumentParser(description=dedent(DESC),
                            formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--db', help='user specified database path')
    parser.add_argument('-r', action='store_true', dest='recursive',
                        help='tag/untag including sub-directories')
    parser.add_argument('--debug', action='store_true', dest='debug',
                        help='print debug messages to stderr')
    parser.add_argument('action', help='tag/untag/find/daemon')
    parser.add_argument('tags', nargs='?',
                        help='tags or search expression (in quotes)')
    parser.add_argument('files', help='list of files', nargs='*')
    args = parser.parse_args()

    # Default database is a hidden file in user's home directory
    if not args.db:
        args.db = os.path.expanduser('~/.markafile.sqlite3')
    signal.signal(signal.SIGTERM, disconnect)

    try:

        # Execute specified action
        if args.action in ACTIONS:
            connect()

            # Prepare tag database
            setup()
            ACTIONS[args.action]()
            disconnect()
            sys.exit(0)
        else:
            parser.print_help()
            sys.exit(1)
    except sqlite3.Error as err:
        panic('Database error: ' + str(err))
#    except Exception as err:
#        panic('Exception: ' + str(err))
