#!/usr/bin/env python3
from argparse import ArgumentParser, RawDescriptionHelpFormatter
from os import walk, environ
from os.path import isfile, isdir, abspath, relpath, join as path_join
from textwrap import dedent
import os
import re
import signal
import sqlite3
import sys


DESC = '''
NAME
    markafile - file tagging for *nix operating systems

DESCRIPTION
    markafile is a utility program for tagging files and searching files by
    tags using a powerful search expression.

    Tags are case in-sensitive, may not contain space(s). Any number of tags
    may be applied to any file. File tags are stored in an SQLite database.

    Should any error occur, markafile will exit with status 1 and print error
    details to STDERR.

REQUIRED PERMISSIONS
    markafile requires the following permissions:
    - Read-Write permission on SQLite database file
    - Read-Write permission on SQLite database file directory (1)
    - Read-Execute permission on tagged directory (2)
    - Read permission on tagged file

    (1) markafile creates the database file if it does not exist.

    (2) markafile tags directory files, it does not tag the directory itself.

TAG FILES
    To add tags to a file:
    $ markafile tag "startup console conf" /etc/motd

    To add tags to multiple files:
    $ markafile tag "conf cron script" /etc/cron.daily /etc/cron.hourly

    To add tags to directory files:
    $ markafile tag "script" /etc/rc.d

    To add tags to directory files (including sub-directories)
    $ markafile tag "srv-conf conf" /etc/httpd /etc/ppp -r

    File tag may not:
    - be "and" "or" "not" "(" ")"
    - contain space(s)
    - contain asterisk(s)

SEARCH FILES
    To print all tagged files and tags under a directory:
    $ markafile find "*" /etc/httpd

    To print all tagged files and tags under a directory (including
    sub-directories):
    $ markafile find "*" /etc -r

COMPLEX SEARCH
    Search expression is a mini-language consists of tags, keywords and
    parenthesis. The expression is translated into SQL query for execution.

    TAG NAMES
        Case in-sensitive file tags
    KEYWORDS
        Logical operators "and", "or", "not"
    PARANTHESIS
        To elevate precedence of their enclosed expression

    Simple search expression example:
    $ markafile find "srv-conf" /etc -r

    Complex example:
    $ markafile find "conf and srv-conf and not (cron or script)" /etc -r

REMOVE FILE TAGS
    Use action "untag", specify search expression followed by ":" and tags to
    be removed:
    $ markafile untag "not (cron or script):srv-conf conf" /etc -r

    If ":*" follows the search expression, all tags will be removed from search
    result:
    $ markafile untag "not (cron or script):*" /etc -r

    To remove all tags from all files:
    $ markafile untag "*:*" /etc -r

ENVIRONMENT VARIABLE
    Variable MARKAFILE_RELPATH may be set to absolute path to a directory, this
    will change the behaviour of markafile.

    If env variable 'MARKAFILE_RELPATH' is set:
      - relative path will be calculated and stored with tags
      - query will calculate relative path and search them in tag database

    For example, first MARKAFILE_RELPATH is set to "/home/howard":
      - Apply tag "code" to "/home/howard/f.py" will tag "code" to "f.py".
    Then, the database /home/howard/.markafile.sqlite3 is moved to ~belle:
      - Set MARKAFILE_RELPATH to "/home/belle"
      - If belle has "f.py" in her home directory, query "code" in ~belle will
      return the file "f.py"

BUGS
    When tagged files are moved/deleted, their original paths will remain in
    database thus causing incorrect path-tag associations. However, search
    results are guaranteed to only return results of correct and valid paths.

AUTHOR
    Howard Guo <guohouzuo@gmail.com>

REPORTING BUGS
    Please contact the author by Email for bug report and feedback.

COPYRIGHT
    Copyright (c) 2013 Howard Guo
    All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
    ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
    POSSIBILITY OF SUCH DAMAGE.
'''

SETUP = '''CREATE TABLE IF NOT EXISTS TAG (
             ID INTEGER PRIMARY KEY AUTOINCREMENT,
             PATH TEXT NOT NULL,
             TAG TEXT COLLATE NOCASE NOT NULL
           );

           CREATE INDEX IF NOT EXISTS TAG_PATH ON TAG (PATH);
           CREATE INDEX IF NOT EXISTS TAG_TAG ON TAG (TAG COLlATE NOCASE);
           CREATE INDEX IF NOT EXISTS TAG_BOTH ON TAG
           (PATH, TAG COLLATE NOCASE);'''

args, db, envrel = None, None, None

try:
    envrel = environ['MARKAFILE_RELPATH']
except KeyError:
    envrel = '/'

def debug(msg):
    if args and args.debug:
        sys.stderr.write(str(msg) + '\n')


def panic(msg):
    sys.stderr.write('ERROR: {0}\n'.format(str(msg)))
    sys.exit(1)


def connect():
    global args, db
    if not (args or args.db or args.db.strip()):
        panic('Database path may not be blank')

    db = sqlite3.connect(args.db)
    debug('Connected to "{0}"'.format(args.db))


def disconnect():
    global db
    if db:
        db.commit()
        db.close()
        debug('Disconnected')


def setup():
    global db
    cursor = db.cursor()
    cursor.executescript(SETUP)
    debug('Database setup completed')


# Returns absolute path of every file in the path
def parsepath():
    global args
    files = []
    for path in args.files:
        path = abspath(path)
        if isfile(path):
            files.append(path)
        elif isdir(path):
            if args.recursive:
                for root, _, dir_files in walk(path):
                    files += [path_join(root, single_file)
                              for single_file in dir_files]
            else:
                try:
                    files += [path_join(path, x) for x in next(walk(path))[2]]
                except StopIteration:
                    pass
    return files


def tag():
    global db, args
    if not args.tags:
        return

    new_tags = []
    cursor = db.cursor()
    for tag in args.tags.split():
        for path in parsepath():
            path = relpath(path, envrel)
            cursor.execute('SELECT COUNT(*) FROM TAG ' +
                           'WHERE PATH = ? AND TAG = ?', (path, tag))
            if cursor.fetchone()[0]:
                debug('File "{0}" already has tag "{1}"'.format(path, tag))
            else:
                new_tags.append((path, tag))
                debug('Add tag "{0}" to file "{1}"'.format(tag, path))
    cursor = db.cursor()
    cursor.executemany('INSERT INTO TAG(PATH, TAG) VALUES (?, ?)',
                       new_tags)


def untag():
    global db, args
    (search_expression, to_remove) = args.tags.split(':')[:3]
    result = find(search_expression)
    if result:
        cursor = db.cursor()
        if to_remove == '*':
            cursor.executemany('DELETE FROM TAG WHERE PATH = ?',
                               [(k,) for k in result])
        else:
            cursor.executemany('DELETE FROM TAG WHERE PATH = ? AND TAG = ?',
                               [(k, tag) for k in result for tag in result[k]])


def find(tags):
    global db
    parsed_path = parsepath()
    path_tags = {} # Path - tags mapping to return

    if not (args and tags and parsed_path):
        return {}

    cursor = db.cursor()
    if tags == '*':
        for path in parsed_path:
            path = relpath(path, envrel)
            cursor.execute('SELECT TAG FROM TAG WHERE PATH = ?', (path,))
            rows = cursor.fetchall()
            if rows:
                try:
                    path_tags[path].append(row[0] for row in rows)
                except KeyError:
                    path_tags[path] = [row[0] for row in rows]
    else:
        keywords = set(['and', 'not', 'or', '(', ')'])
        parameters = []

        # Split search expression into keywords and tags
        query_params = []
        for thing in [a.strip() for a in re.split('([^\(\) ]+)', tags)]:
            if not thing:
                continue
            if thing in keywords:
                query_params.append(thing)
            else:
                query_params.append('? IN (SELECT T2.TAG FROM TAG T2 ' +
                                   'WHERE T2.PATH = T1.PATH)')
                parameters.append(thing)

        # Avoid "too many parameters" SQLite error
        for i in range(0, len(parsed_path), 500):
            files = [relpath(path, envrel) for path in parsed_path[i:i + 500]]
            path_params = '?,' * len(files)

            # Construct the query
            query = 'SELECT T1.PATH, T1.TAG FROM TAG T1 '
            query += 'WHERE (' + ' '.join(query_params) + ') '
            query += 'AND PATH IN (' + path_params[:-1] + ')'

            all_params = []
            all_params += parameters
            all_params += files

            debug('Query params: ' + str(query_params))
            debug('Query: ' + query)
            debug('Parameters: ' + str(all_params))

            cursor.execute(query, all_params)

            # Make path VS tags mapping
            for path, tag in cursor.fetchall():
                try:
                    path_tags[path].append(tag)
                except KeyError:
                    path_tags[path] = [tag]
    return path_tags


def cli_find():
    global args
    result = find(args.tags)
    for path in result:
        print(path + ':' + ' '.join(result[path]))

ACTIONS = {'tag': tag, 'untag': untag, 'find': cli_find}

if __name__ == '__main__':
    parser = ArgumentParser(description=dedent(DESC),
                            formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--db', help='user specified database path')
    parser.add_argument('-r', action='store_true', dest='recursive',
                        help='tag/untag/find including sub-directories')
    parser.add_argument('--debug', action='store_true', dest='debug',
                        help='print debug messages to stderr')
    parser.add_argument('action', help='tag/untag/find')
    parser.add_argument('tags', nargs='?',
                        help='tags or search expression (in quotes)')
    parser.add_argument('files', help='list of files', nargs='*')
    args = parser.parse_args()

    # Default database is a hidden file in user's home directory
    if not args.db:
        args.db = os.path.expanduser('~/.markafile.sqlite3')
    signal.signal(signal.SIGTERM, disconnect)

    try:
        if args.action in ACTIONS:
            connect()
            setup() # Prepare tag database
            ACTIONS[args.action]() # Execute specified action
            disconnect()
            sys.exit(0)
        else:
            parser.print_help()
            sys.exit(1)
    except sqlite3.Error as err:
        panic(err)
