#!/usr/bin/python
import argparse, textwrap, sqlite3, os, sys, signal

MAN = '''
markafile - all-in-one solution for file tagging
'''

db_path, db = None, None

def disconnect():
    global db, db_path
    try:
        if db:
            db.commit()
            db.close()
            sys.stderr.write('Database "{0}" has been disconnected\n'.format(db_path))
    except sqlite3.Error as err:
        sys.stderr.write('Unable to disconnect database "{db}", error: "{err}"\n'.format(**{'db': str(db_path), 'err': str(err)}))
        sys.exit(1)

def connect():
    global db, db_path
    if not db_path:
        sys.stderr.write('Tag database path may not be empty\n')
        sys.exit(1)
    try:
        db = sqlite3.connect(db_path)
        sys.stderr.write('Connected to database "{0}"\n'.format(db_path))
    except sqlite3.Error as err:
        sys.stderr.write('Unable to connect to database "{db}", error: "{err}"\n'.format(**{'db': str(db_path), 'err': str(err)}))
        sys.exit(1)

def setup_tables():
    cur = db.cursor()
    cur.execute('''CREATE TABLE IF NOT EXISTS TAG (
                     ID INTEGER PRIMARY KEY AUTOINCREMENT,
                     PATH TEXT NOT NULL,
                     TAG TEXT NOT NULL
                   )''')
    cur.execute('''CREATE TABLE IF NOT EXISTS WATCH (
                     ID INTEGER PRIMARY KEY AUTOINCREMENT,
                     PATH TEXT NOT NULL
                   )''')
    sys.stderr.write('Tables are setup for DB "{0}"\n'.format(db_path))
    disconnect()
    connect()
    sys.stderr.write('Reconnection completed on DB "{0}"\n'.format(db_path))

def tag(args):
    pass

def untag(args):
    pass

def tags(args):
    pass

def find(args):
    pass

def watch(args):
    pass

def unwatch(args):
    pass

def daemon(args):
    pass

ACTIONS = {'tag': tag, 'untag': untag, 'tags': tags, 'find': find,
           'watch': watch, 'unwatch': unwatch, 'daemon': daemon}
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=textwrap.dedent(MAN),
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--db', help='tag database path')
    parser.add_argument('action', help='tag/untag/tags/find/watch/unwatch/daemon')
    parser.add_argument('tags', help='quoted tags or expression for searching by tags')
    parser.add_argument('files', help='files to perform the action on', nargs='*')
    args = parser.parse_args()
    db_path = args.db
    # Default database is a hidden file in user's home directory
    if not db_path:
        db_path = os.path.expanduser('~/.markafile.sqlite3')
    signal.signal(signal.SIGTERM, disconnect)
    connect()
    setup_tables()
    if args.action in ACTIONS:
        ACTIONS[args.action](args)
        disconnect()
        sys.exit(0)
    sys.stderr.write('Unknown action "{0}", try "markafile -h"\n'.format(args.action))
    disconnect()
    sys.exit(1)
